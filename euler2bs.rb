#!/usr/bin/env ruby 

###############

#Project Euler Problem 2

# Question #
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

###############

# f = 0
# n = 0

# array = []

# while  f < 10 do

# 	puts "#{array}"
	
# 	f(n-2) = f(n) - f(n-1)

	
# 	#array.push(f)

# end
iter = 0
fib_num = []


def fib_num(fn)
	return fn if fn < 2
	#fib_num  = [0,1]
	(fn-1).times do
		fib_num.push(fib_num[-1] + fib_num[-2])
	end
	
	return fib_num.each
end

# def fib_num(fn)
# 	return fn if fn < 2
# 	fib_num  = [0,1]
# 	(fn-1).times do
# 		fib_num.push(fib_num[-1] + fib_num[-2])
# 	end
# 	return fib_num.last
# end


while fib_num(iter) < 400000
	
	

	iter = iter +1
	
end
 



puts fib_num(iter)


